#!/usr/bin/env python3.11
"""
HK - Hacker Knowledge CLI
Powered by Manus AI via api.manus.im
"""

import sys
import os
import json
from datetime import datetime
from pathlib import Path

# Load environment
sys.path.insert(0, '/home/ubuntu/aiprojectattack')
env_file = Path('/home/ubuntu/aiprojectattack/.env')
if env_file.exists():
    with open(env_file) as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"').strip("'")
                
                if key in os.environ and os.environ[key] and not os.environ[key].startswith('${'):
                    continue
                
                if value.startswith('${') and value.endswith('}'):
                    var_name = value[2:-1]
                    expanded = os.environ.get(var_name, '')
                    if expanded:
                        value = expanded
                    else:
                        continue
                
                os.environ[key] = value

try:
    from openai import OpenAI
    from rich.console import Console
    from rich.markdown import Markdown
    from rich.panel import Panel
    from rich.prompt import Prompt
    from rich.live import Live
    from rich.spinner import Spinner
except ImportError:
    print("Installing dependencies...", file=sys.stderr)
    os.system("pip3 install -q openai rich >&2")
    from openai import OpenAI
    from rich.console import Console
    from rich.markdown import Markdown
    from rich.panel import Panel
    from rich.prompt import Prompt
    from rich.live import Live
    from rich.spinner import Spinner


class HK:
    """Hacker Knowledge CLI"""
    
    def __init__(self):
        self.console = Console()
        
        # OpenAI client (connects to Manus API)
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key or api_key.startswith('${'):
            self.console.print("[red]‚ùå OPENAI_API_KEY not set[/red]")
            sys.exit(1)
        
        self.client = OpenAI(api_key=api_key)
        self.model = "gpt-4.1-mini"
        
        # History
        self.history_dir = Path.home() / '.hk_history'
        self.history_dir.mkdir(exist_ok=True)
        self.history_file = self.history_dir / 'conversation.json'
        self.history = []
        
        self._load_history()
        
        # System prompt
        self.system_prompt = """‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Manus AI - AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ dLNk Attack Platform

**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ:**
- ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö dLNk (Backend, Frontend, API, Agents, C2, Zero-Day Hunter)
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
- ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
- ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£

**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö:**
- ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
- ‡πÉ‡∏ä‡πâ Markdown format
- ‡πÉ‡∏™‡πà code block ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î
- ‡πÉ‡∏ä‡πâ emoji ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
- ‡∏ï‡∏≠‡∏ö‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô ‡πÑ‡∏°‡πà‡∏≠‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏≠‡∏°

**‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ dLNk:**
- Backend API: 122 endpoints, PostgreSQL, Redis
- Frontend: Dashboard, Web Terminal
- AI Agents: 75 agents (98% functional)
- C2 Infrastructure: Shell Handler, Payload Generator
- Zero-Day Hunter: Deep scan, Fuzzing, ML analysis
- LLM Integration: OpenAI GPT-4.1-mini
- Self-Healing: Auto-recovery, Health monitoring
- Overall Progress: 89.6%
"""
    
    def _load_history(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        try:
            if self.history_file.exists():
                data = json.loads(self.history_file.read_text(encoding='utf-8'))
                self.history = data.get('messages', [])[-20:]  # ‡πÄ‡∏Å‡πá‡∏ö 20 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        except:
            pass
    
    def _save_history(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        try:
            self.history_file.write_text(json.dumps({
                'timestamp': datetime.now().isoformat(),
                'messages': self.history
            }, ensure_ascii=False, indent=2), encoding='utf-8')
        except:
            pass
    
    def banner(self):
        """‡πÅ‡∏™‡∏î‡∏á banner"""
        banner_text = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó                    ‚ïë
‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù                    ‚ïë
‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù                     ‚ïë
‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó                     ‚ïë
‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó                    ‚ïë
‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù                    ‚ïë
‚ïë                                                           ‚ïë
‚ïë   HK - Hacker Knowledge                                  ‚ïë
‚ïë   Powered by Manus AI (api.manus.im)                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
        self.console.print(banner_text, style="bold cyan")
        
        if self.history:
            self.console.print(f"[dim]üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ {len(self.history)} ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°[/dim]\n")
        
        self.console.print("[dim]‡∏û‡∏¥‡∏°‡∏û‡πå 'help' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ | 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å[/dim]\n")
    
    def show_help(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        help_text = """
**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:**
- `exit`, `quit`, `q` - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
- `clear` - ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
- `history` - ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
- `export` - ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô Markdown
- `help` - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠

**‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**

üí¨ **‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:**
- "‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ dLNk"
- "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"
- "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô C2 Infrastructure"

üîß **‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:**
- "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ SQL injection"
- "‡∏ß‡∏¥‡∏ò‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á reverse shell payload"
- "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ privilege escalation"

üíª **‡πÇ‡∏Ñ‡πâ‡∏î:**
- "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Python script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö port scanning"
- "‡∏™‡∏£‡πâ‡∏≤‡∏á exploit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö buffer overflow"
- "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç bug ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå X"

üìä **‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**
- "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏Ç‡∏≠‡∏á target.com"
- "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÇ‡∏à‡∏°‡∏ï‡∏µ web application"
- "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô"
"""
        self.console.print(Panel(Markdown(help_text), title="Help", border_style="cyan"))
    
    def show_history(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        if not self.history:
            self.console.print("[yellow]‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤[/yellow]")
            return
        
        self.console.print("\n[bold cyan]üìú ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ 10 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:[/bold cyan]\n")
        
        recent = self.history[-20:]  # 10 ‡∏Ñ‡∏π‡πà (user + assistant)
        count = 0
        for i in range(len(recent)-1, -1, -1):
            msg = recent[i]
            role = "üë§ You" if msg['role'] == 'user' else "ü§ñ Manus"
            content = msg['content'][:80] + "..." if len(msg['content']) > 80 else msg['content']
            timestamp = msg.get('timestamp', '')
            
            self.console.print(f"[dim]{timestamp}[/dim]")
            self.console.print(f"{role}: {content}\n")
            
            count += 1
            if count >= 10:
                break
    
    def export_history(self):
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥"""
        try:
            export_file = self.history_dir / f'export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.md'
            
            with open(export_file, 'w', encoding='utf-8') as f:
                f.write(f"# HK Conversation History\n\n")
                f.write(f"**Exported:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                f.write("---\n\n")
                
                for msg in self.history:
                    role = msg['role']
                    content = msg['content']
                    timestamp = msg.get('timestamp', '')
                    
                    if role == 'user':
                        f.write(f"## üë§ You\n\n")
                    else:
                        f.write(f"## ü§ñ Manus AI\n\n")
                    
                    if timestamp:
                        f.write(f"*{timestamp}*\n\n")
                    
                    f.write(f"{content}\n\n")
                    f.write("---\n\n")
            
            self.console.print(f"[green]‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {export_file}[/green]")
            
        except Exception as e:
            self.console.print(f"[red]‚ùå Error: {e}[/red]")
    
    def chat(self, question: str):
        """‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡∏±‡∏ö Manus AI"""
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        self.history.append({
            'role': 'user',
            'content': question,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° messages
        messages = [{'role': 'system', 'content': self.system_prompt}]
        messages.extend(self.history[-20:])  # ‡∏™‡πà‡∏á context 20 ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
        try:
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Manus API
            self.console.print("\n[cyan]ü§ñ Manus AI:[/cyan]")
            
            with Live(Spinner("dots", text="[cyan]‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...[/cyan]"), console=self.console, transient=True):
                response = self.client.chat.completions.create(
                    model=self.model,
                    messages=messages,
                    temperature=0.7,
                    max_tokens=2000,
                    stream=False
                )
            
            answer = response.choices[0].message.content
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            self.history.append({
                'role': 'assistant',
                'content': answer,
                'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
            try:
                self.console.print(Markdown(answer))
            except:
                self.console.print(answer)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
            self._save_history()
            
        except Exception as e:
            self.console.print(f"[red]‚ùå Error: {e}[/red]")
    
    def run(self):
        """Main loop"""
        # Set UTF-8
        if hasattr(sys.stdin, 'reconfigure'):
            sys.stdin.reconfigure(encoding='utf-8', errors='ignore')
        if hasattr(sys.stdout, 'reconfigure'):
            sys.stdout.reconfigure(encoding='utf-8', errors='ignore')
        
        self.banner()
        
        while True:
            try:
                # ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
                question = Prompt.ask("\n[bold green]You[/bold green]").strip()
                
                if not question:
                    continue
                
                # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©
                cmd = question.lower()
                
                if cmd in ['exit', 'quit', 'q']:
                    self.console.print("\n[cyan]üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô HK![/cyan]\n")
                    break
                
                elif cmd == 'clear':
                    self.history = []
                    self._save_history()
                    os.system('clear')
                    self.banner()
                    self.console.print("[green]‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß[/green]")
                    continue
                
                elif cmd == 'history':
                    self.show_history()
                    continue
                
                elif cmd == 'export':
                    self.export_history()
                    continue
                
                elif cmd == 'help':
                    self.show_help()
                    continue
                
                # ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
                self.chat(question)
                
            except KeyboardInterrupt:
                self.console.print("\n\n[cyan]üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô HK![/cyan]\n")
                break
            except Exception as e:
                self.console.print(f"[red]‚ùå Error: {e}[/red]")


if __name__ == "__main__":
    hk = HK()
    hk.run()

