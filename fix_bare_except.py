#!/usr/bin/env python3
"""
‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç bare except (except: ‡πÅ‡∏ó‡∏ô except Exception:)
"""

import re
from pathlib import Path

def fix_bare_except(filepath: Path) -> int:
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç bare except ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original = content
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà except: ‡∏î‡πâ‡∏ß‡∏¢ except Exception as e:
        # Pattern: except: (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà except SomeException:)
        content = re.sub(
            r'\bexcept\s*:\s*$',
            'except Exception as e:',
            content,
            flags=re.MULTILINE
        )
        
        if content != original:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            return content.count('except Exception as e:') - original.count('except Exception as e:')
        
        return 0
    except Exception as e:
        print(f"Error fixing {filepath}: {e}")
        return 0

if __name__ == "__main__":
    print("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç bare except ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n")
    
    total_fixed = 0
    files_fixed = 0
    
    for py_file in Path('.').rglob("*.py"):
        if '__pycache__' in str(py_file) or 'venv' in str(py_file):
            continue
        
        fixed = fix_bare_except(py_file)
        if fixed > 0:
            print(f"‚úÖ {py_file}: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {fixed} ‡∏à‡∏∏‡∏î")
            total_fixed += fixed
            files_fixed += 1
    
    print(f"\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {total_fixed} ‡∏à‡∏∏‡∏î‡πÉ‡∏ô {files_fixed} ‡πÑ‡∏ü‡∏•‡πå")
