#!/usr/bin/env python3
"""
Phase 2: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Error Handling
"""

import os
import re
from pathlib import Path
from typing import List, Dict, Tuple

def find_except_pass(directory=".") -> List[Dict]:
    """‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ except: pass"""
    issues = []
    
    for py_file in Path(directory).rglob("*.py"):
        if '__pycache__' in str(py_file) or 'venv' in str(py_file):
            continue
            
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            for i, line in enumerate(lines):
                stripped = line.strip()
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô except block
                if stripped.startswith('except') and stripped.endswith(':'):
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    if i + 1 < len(lines):
                        next_line = lines[i + 1].strip()
                        if next_line == 'pass':
                            issues.append({
                                'file': str(py_file),
                                'line': i + 1,  # line number (1-indexed)
                                'except_line': i,
                                'context': ''.join(lines[max(0, i-2):min(len(lines), i+3)])
                            })
        except Exception as e:
            print(f"Error reading {py_file}: {e}")
    
    return issues

def fix_except_pass(filepath: str, except_line: int, pass_line: int) -> bool:
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç except: pass ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        if pass_line >= len(lines):
            return False
        
        # ‡∏´‡∏≤ indent ‡∏Ç‡∏≠‡∏á pass
        pass_indent = len(lines[pass_line]) - len(lines[pass_line].lstrip())
        
        # ‡∏î‡∏∂‡∏á exception type ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î except
        except_line_text = lines[except_line].strip()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á error handling ‡πÉ‡∏´‡∏°‡πà
        new_lines = []
        if 'Exception as e' in except_line_text or 'Exception' in except_line_text:
            new_lines.append(' ' * pass_indent + 'log.error(f"Error: {e}")\n')
        else:
            new_lines.append(' ' * pass_indent + 'log.error("Error occurred")\n')
        
        # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà pass
        lines[pass_line] = ''.join(new_lines)
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        with open(filepath, 'w', encoding='utf-8') as f:
            f.writelines(lines)
        
        return True
    except Exception as e:
        print(f"Error fixing {filepath}: {e}")
        return False

if __name__ == "__main__":
    print("üîç ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ except: pass ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
    issues = find_except_pass()
    
    print(f"\nüìä ‡∏û‡∏ö {len(issues)} ‡∏à‡∏∏‡∏î")
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå
    by_file = {}
    for issue in issues:
        filepath = issue['file']
        if filepath not in by_file:
            by_file[filepath] = []
        by_file[filepath].append(issue)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    print(f"\nüìÅ ‡∏û‡∏ö‡πÉ‡∏ô {len(by_file)} ‡πÑ‡∏ü‡∏•‡πå:\n")
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    critical_files = []
    medium_files = []
    low_files = []
    
    for filepath, file_issues in sorted(by_file.items()):
        if any(x in filepath for x in ['agents/', 'core/', 'data_exfiltration/']):
            critical_files.append((filepath, file_issues))
        elif any(x in filepath for x in ['api/', 'advanced_agents/']):
            medium_files.append((filepath, file_issues))
        else:
            low_files.append((filepath, file_issues))
    
    print(f"üî¥ Critical Files ({len(critical_files)} ‡πÑ‡∏ü‡∏•‡πå, {sum(len(f[1]) for f in critical_files)} ‡∏à‡∏∏‡∏î):")
    for filepath, file_issues in critical_files[:10]:
        print(f"   {filepath}: {len(file_issues)} ‡∏à‡∏∏‡∏î")
    if len(critical_files) > 10:
        print(f"   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(critical_files) - 10} ‡πÑ‡∏ü‡∏•‡πå")
    
    print(f"\nüü° Medium Files ({len(medium_files)} ‡πÑ‡∏ü‡∏•‡πå, {sum(len(f[1]) for f in medium_files)} ‡∏à‡∏∏‡∏î):")
    for filepath, file_issues in medium_files[:10]:
        print(f"   {filepath}: {len(file_issues)} ‡∏à‡∏∏‡∏î")
    if len(medium_files) > 10:
        print(f"   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(medium_files) - 10} ‡πÑ‡∏ü‡∏•‡πå")
    
    print(f"\nüîµ Low Priority Files ({len(low_files)} ‡πÑ‡∏ü‡∏•‡πå, {sum(len(f[1]) for f in low_files)} ‡∏à‡∏∏‡∏î):")
    for filepath, file_issues in low_files[:10]:
        print(f"   {filepath}: {len(file_issues)} ‡∏à‡∏∏‡∏î")
    if len(low_files) > 10:
        print(f"   ... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å {len(low_files) - 10} ‡πÑ‡∏ü‡∏•‡πå")
    
    print("\n‚úÖ Phase 2.1 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! (Analyze & Group)")
