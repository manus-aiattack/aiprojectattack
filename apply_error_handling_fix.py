#!/usr/bin/env python3
"""
Phase 2.2-2.4: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Error Handling ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
"""

import os
import re
from pathlib import Path
from typing import List, Dict

def find_except_pass(directory=".") -> List[Dict]:
    """‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ except: pass"""
    issues = []
    
    for py_file in Path(directory).rglob("*.py"):
        if '__pycache__' in str(py_file) or 'venv' in str(py_file):
            continue
            
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            for i, line in enumerate(lines):
                stripped = line.strip()
                if stripped.startswith('except') and stripped.endswith(':'):
                    if i + 1 < len(lines):
                        next_line = lines[i + 1].strip()
                        if next_line == 'pass':
                            issues.append({
                                'file': str(py_file),
                                'line': i + 2,  # 1-indexed, pass line
                                'except_line': i + 1,  # 1-indexed, except line
                                'except_text': stripped
                            })
        except Exception as e:
            print(f"Error reading {py_file}: {e}")
    
    return issues

def fix_file(filepath: str, issues: List[Dict]) -> bool:
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ line number ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
        issues_sorted = sorted(issues, key=lambda x: x['line'], reverse=True)
        
        modified = False
        for issue in issues_sorted:
            pass_line_idx = issue['line'] - 1  # Convert to 0-indexed
            except_line_idx = issue['except_line'] - 1
            
            if pass_line_idx >= len(lines):
                continue
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô pass ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if lines[pass_line_idx].strip() != 'pass':
                continue
            
            # ‡∏´‡∏≤ indent
            pass_indent = len(lines[pass_line_idx]) - len(lines[pass_line_idx].lstrip())
            
            # ‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ logging import ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            has_logging = any('import logging' in line or 'from logging import' in line for line in lines)
            has_log = any(re.search(r'\blog\s*=', line) for line in lines)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á error handling
            except_text = issue['except_text']
            
            if ' as ' in except_text:
                # ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ exception
                var_name = except_text.split(' as ')[-1].strip(':').strip()
                if has_logging or has_log:
                    new_line = ' ' * pass_indent + f'logging.error(f"Error: {{{var_name}}}")\n'
                else:
                    new_line = ' ' * pass_indent + f'print(f"Error: {{{var_name}}}")\n'
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ exception
                if has_logging or has_log:
                    new_line = ' ' * pass_indent + 'logging.error("Error occurred")\n'
                else:
                    new_line = ' ' * pass_indent + 'print("Error occurred")\n'
            
            lines[pass_line_idx] = new_line
            modified = True
        
        if modified:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            return True
        
        return False
    except Exception as e:
        print(f"‚ùå Error fixing {filepath}: {e}")
        return False

if __name__ == "__main__":
    print("üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Error Handling ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n")
    
    issues = find_except_pass()
    
    # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÑ‡∏ü‡∏•‡πå
    by_file = {}
    for issue in issues:
        filepath = issue['file']
        if filepath not in by_file:
            by_file[filepath] = []
        by_file[filepath].append(issue)
    
    print(f"üìä ‡∏û‡∏ö {len(issues)} ‡∏à‡∏∏‡∏î‡πÉ‡∏ô {len(by_file)} ‡πÑ‡∏ü‡∏•‡πå\n")
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
    fixed_count = 0
    error_count = 0
    
    for filepath, file_issues in sorted(by_file.items()):
        if fix_file(filepath, file_issues):
            print(f"‚úÖ {filepath}: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {len(file_issues)} ‡∏à‡∏∏‡∏î")
            fixed_count += 1
        else:
            print(f"‚ö†Ô∏è  {filepath}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á")
            error_count += 1
    
    print(f"\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"   ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {fixed_count} ‡πÑ‡∏ü‡∏•‡πå")
    print(f"   ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {error_count} ‡πÑ‡∏ü‡∏•‡πå")
